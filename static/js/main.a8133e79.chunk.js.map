{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","SimpleHabit","useState","setCount","spanRef","useRef","hadleIncrement","useCallback","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAyDeA,E,4MAzCbC,gBAAkB,WAChB,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAGpCC,gBAAkB,WAChB,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAGpCG,aAAe,WACb,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,uDArBjC,WACEK,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,e,kCAKF,WACEH,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,oB,oBAiBF,WAAU,IAAD,EACiBD,KAAKT,MAAME,MAA3BQ,EADD,EACCA,KAAMC,EADP,EACOA,MACd,OACE,qBAAIC,UAAU,QAAd,UACE,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAC/B,wBACEC,UAAU,8BACVC,QAASJ,KAAKV,gBAFhB,SAIE,mBAAGa,UAAU,yBAEf,wBACEA,UAAU,8BACVC,QAASJ,KAAKN,gBAFhB,SAIE,mBAAGS,UAAU,0BAEf,wBACEA,UAAU,4BACVC,QAASJ,KAAKJ,aAFhB,SAIE,mBAAGO,UAAU,0B,GA/CHE,iBC8BLC,EAzBMC,gBAAK,SAAChB,GACzB,IAAMiB,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAUvB,OACE,uBAAME,IAAKJ,EAASL,UAAU,WAAWU,SAT1B,SAACC,GAChBA,EAAMC,iBACN,IAAMd,EAAOU,EAASK,QAAQC,MAC9BhB,GAAQV,EAAM2B,MAAMjB,GAEpBO,EAAQQ,QAAQG,SAIhB,UACE,uBACEP,IAAKD,EACLS,KAAK,OACLjB,UAAU,YACVkB,YAAY,UAEd,wBAAQlB,UAAU,aAAlB,uBCiBSmB,E,4MA5BbC,UAAY,SAACtB,GACX,EAAKV,MAAM2B,MAAMjB,I,4CAGnB,WAAU,IAAD,OAEP,OADAH,QAAQC,IAAI,UAEV,sBAAKI,UAAU,SAAf,UACE,cAAC,EAAD,CAAce,MAAOlB,KAAKuB,YAC1B,6BACGvB,KAAKT,MAAMiC,OAAOC,KAAI,SAAChC,GAAD,OACrB,cAAC,EAAD,CAEEA,MAAOA,EACPD,YAAa,EAAKD,MAAMC,YACxBG,YAAa,EAAKJ,MAAMI,YACxBE,SAAU,EAAKN,MAAMM,UAJhBJ,EAAMiC,SAQjB,wBAAQvB,UAAU,eAAeC,QAASJ,KAAKT,MAAMoC,QAArD,8B,GAjCaC,aCUNC,E,4JAXb,WACE,OACE,yBAAQ1B,UAAU,SAAlB,UACE,mBAAGA,UAAU,4BACb,iDACA,sBAAMA,UAAU,eAAhB,SAAgCH,KAAKT,MAAMuC,oB,GAN9BzB,iB,GCQHuB,Y,aCmCHG,EAhCK,SAACxC,GAAW,IAAD,EACHyC,mBAAS,GADN,mBACtB9B,EADsB,KACf+B,EADe,KAEvBC,EAAUC,mBAIVC,EAAiBC,uBAAY,WACjCJ,EAAS/B,EAAQ,MAYnB,OAJAoC,qBAAU,WACRxC,QAAQC,IAAR,8BAAmCG,MAClC,CAACA,IAGF,qBAAIC,UAAU,QAAd,UACE,sBAAMS,IAAKsB,EAAS/B,UAAU,aAA9B,qBAGA,sBAAMA,UAAU,cAAhB,SAA+BD,IAC/B,wBAAQC,UAAU,8BAA8BC,QAASgC,EAAzD,SACE,mBAAGjC,UAAU,6BChCrBoC,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8133e79.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\n// PureComponent도 Component를 상속하기 때문에 lifecycle함수를 사용할 수 있다.\nclass Habit extends PureComponent {\n  componentDidMount() {\n    console.log(`habit: ${this.props.habit.name} mounted`);\n    // 타이머를 시작\n    // 실시간 채팅에서 소켓 초기화\n  }\n\n  componentWillUnmount() {\n    console.log(`habit: ${this.props.habit.name} will unmount`);\n    // 타이머를 중지\n    // 정리하고 리소스 지우기\n  }\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","// component 단축키 rcc-tab\n// function 단축키 rsi-tab\n// const habitAddForm = (props) => {};\n// function HabitAddForm(props) {} 처럼 할당안하고 순수함수로도 작성가능\n\n// PureComponent를 function으로 바꿀 때는 memo를 사용\nimport React, { memo } from \"react\";\n\nconst HabitAddForm = memo((props) => {\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const name = inputRef.current.value;\n    name && props.onAdd(name);\n    // inputRef.current.value = \"\";\n    formRef.current.reset();\n  };\n\n  return (\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Habit\"\n      />\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport HabitAddForm from \"./habitAddForm\";\n\nclass Habits extends Component {\n  // handleIncrement = (habit) => {\n  //   this.props.onIncrement(habit);\n  // };\n\n  // handleDecrement = (habit) => {\n  //   this.props.onDecrement(habit);\n  // };\n\n  // handleDelete = (habit) => {\n  //   this.props.onDelete(habit);\n  // };\n\n  handleAdd = (name) => {\n    this.props.onAdd(name);\n  };\n\n  render() {\n    console.log(\"habits\");\n    return (\n      <div className=\"habits\">\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.props.onIncrement}\n              onDecrement={this.props.onDecrement}\n              onDelete={this.props.onDelete}\n            />\n          ))}\n        </ul>\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from \"react\";\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <header className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </header>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\n// PureComponent는 ShouldComponentUpdated를 구현해 shallow(state & props) comparison을 한다.\n// shallow comparison은 reference를 비교해 값이 같으면 업데이트(render()를 다시 호출) 하지 않는다.\n// 오브젝트 안(자식 오브젝트)의 데이터 값이 바뀌어도 오브젝트의 ref값이 같으면 같은 것으로 보고 업데이트 되지 않는다.\n// 이를 해결하기 위한 방법 1. 변하는 값을 따로 빼서 오브젝트로 전달한다(로직상 불편).\n// 2. 오브젝트는 불변으로 두고 내부의 작은 데이터 변경이 발생할 때 새로운 오브젝트를 만든다. -(상태 관리 라이브러리 존재)\nclass App extends Component {\n  state = {\n    habits: [\n      // id는 key를 위해 지정\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    // console.log(`handleIncrement ${habit.name}`);\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n\n    // shallow comparison을 피하기 위한 방법 2.\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 }; // deconstructing object. 새로운 오브젝트에 안의 내용을 하나씩 복사해서 넣어줌\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    // console.log(`handleDecrement ${habit.name}`);\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    // console.log(`handleDelete ${habit.name}`);\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport \"../app.css\";\n\n// React Hooks\n// https://reactjs.org/docs/hooks-intro.html\n// function에서도 state, ref, callback.. 등등을 사용할 수 있게 해주는 API\n// this., .binding을 사용하지 않아도 되고 코드 중복을 줄일 수 있다.\n\n// class SimpleHabit extends Component처럼 class로 컴포넌트를 만들면 클래스 안의 멤버변수들(hadleIncrement 등)은 클래스가 만들어질 때 딱 한번만 만들어진다.\n// class의 state나 props가 업데이트 되면 클래스 안의 render()함수만 반복해서 호출이 되는 구조이다.\n// 반면 function component를 만들면 컴포넌트가 변경(state, props)되면 코드블록 전체({})가 반복해서 호출된다.\n// 함수 내부의 지역변수(const hadleIncrement 등)도 업데이트 될 때마다 계속계속 반복 호출된다.\n// useState는 React Hook에서 제공하는 APIs 중 하나로 함수가 반복 호출되어도 state가 리셋되지 않고 컴포넌트에 연결된 state가 따로 메모리에 저장 되어있어 동일한 값을 받아온다.\nconst SimpleHabit = (props) => {\n  const [count, setCount] = useState(0);\n  const spanRef = useRef(); // React.createRef()처럼 매번 호출될 때마다 새로운 ref를 만드는 것이 아니라 한 번만 만들어 메모리에 저장해 놓고 다시 사용한다.\n\n  // 콜백함수도 그냥 쓰면 만약 자식 컴포넌트의 onClick에 props로 콜백을 전달했을 때 memo를 써도 props로 전달되는 함수 자체가 변경되기 때문에 실질적 내용은 변한게 없어도 memo에서 계속 업데이트됨.\n  // 이를 방지하고자 useCallback()을 사용해 리액트에 캐시하고 반복 호출되어도 동일한 콜백함수를 전달한다. 단, 주의할 점이 있는데 나중에 공부.\n  const hadleIncrement = useCallback(() => {\n    setCount(count + 1);\n  });\n\n  // useEffect: omponentDidMount와 componentDidUpdate를 결합\n  // 컴포넌트가 처음 mount되었을 때 한번, 그 후 업데이트 될 때마다 호출됨\n  // 두번째 인자로 배열을 추가하면 그 값이 변경되었을 때만 함수가 호출되도록 할 수 있다.\n  // 두번째 인자를 전달하지 않으면 기존 state나 props이 변경될 때마다 호출된다.\n  // 두번째 인자에 비어있는 배열 ,[]을 전달하면 처음 마운트 되었을 때만 호출된다.\n  useEffect(() => {\n    console.log(`mounted & updated!: ${count}`);\n  }, [count]);\n\n  return (\n    <li className=\"habit\">\n      <span ref={spanRef} className=\"habit-name\">\n        Reading\n      </span>\n      <span className=\"habit-count\">{count}</span>\n      <button className=\"habit-button habit-increase\" onClick={hadleIncrement}>\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n    </li>\n  );\n};\n\nexport default SimpleHabit;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app.jsx\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nimport SimpleHabit from \"./components/simpleHabit.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <SimpleHabit />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}